package com.example.demo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.Highscore;
import com.example.demo.HighscoreRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/hangman") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private HighscoreRepository userRepository;
	
	@PostMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam Integer score) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Highscore hs = new Highscore();
		hs.setName(name);
		hs.setScore(score);
		userRepository.save(hs);
		return "Saved\n";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Highscore> getAllUsers() {
		// This returns a JSON or XML with the users
		Iterable<Highscore> hs = userRepository.findAll();
		List<Highscore> sortedList = new ArrayList<>();
		for (Highscore i : hs) {
		    sortedList.add(i);
		}
		Collections.sort(sortedList, new Comparator<Highscore>(){
			@Override
			public int compare(Highscore o1, Highscore o2) {
				// TODO Auto-generated method stub
				return o1.getScore()-o2.getScore();
			}
		});
		
		return sortedList.subList(0, 10);
	}
}
